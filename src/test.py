# Backtester program

import numpy as np
import matplotlib.pyplot as plt

# Importing custom merton module
from tools.merton import price_path

# Backtesting function
def backtest(nsim):
    
    # AAPL stock price per time interval for the date 24-06-2025
    # This array was precomputed by fetching minute-wise data from yfinance
    price_array = np.array([201.88580322265625, 201.82000732421875, 202.4199981689453, 202.07000732421875, 202.24000549316406, 202.25, 202.0399932861328, 202.476806640625, 202.10000610351562, 202.2758026123047, 202.3300018310547, 202.19000244140625, 202.02999877929688, 202.09939575195312, 201.85049438476562, 201.49000549316406, 201.38499450683594, 201.44500732421875, 201.1999053955078, 201.0800018310547, 200.94000244140625, 200.6298065185547, 200.64999389648438, 200.36500549316406, 200.4499969482422, 200.38999938964844, 200.65879821777344, 200.61000061035156, 200.4199981689453, 200.3300018310547, 200.6300048828125, 200.77499389648438, 200.66819763183594, 200.9600067138672, 201.1199951171875, 201.04029846191406, 200.85000610351562, 200.7281951904297, 200.7100067138672, 200.7100067138672, 200.9199981689453, 200.92999267578125, 200.85000610351562, 200.73959350585938, 200.6649932861328, 200.7550048828125, 200.90499877929688, 200.92999267578125, 200.97000122070312, 201.05499267578125, 201.05999755859375, 201.02000427246094, 201.14999389648438, 201.210205078125, 201.24000549316406, 201.22999572753906, 201.10000610351562, 201.05999755859375, 200.9822998046875, 201.01980590820312, 201.05499267578125, 201.11000061035156, 201.00999450683594, 201.14999389648438, 201.22979736328125, 201.0399932861328, 201.02999877929688, 200.98370361328125, 200.99000549316406, 201.1199951171875, 201.30999755859375, 201.35000610351562, 201.3249969482422, 201.3800048828125, 201.52000427246094, 201.4149932861328, 201.4199981689453, 201.44000244140625, 201.39500427246094, 201.1999969482422, 201.25999450683594, 201.3249969482422, 201.36099243164062, 201.32000732421875, 201.30999755859375, 201.22000122070312, 201.10499572753906, 201.08999633789062, 200.97999572753906, 201.029296875, 200.9199981689453, 201.08920288085938, 201.13009643554688, 201.29110717773438, 201.27000427246094, 201.25999450683594, 200.9954071044922, 200.85000610351562, 200.9199981689453, 200.9801025390625, 201.14500427246094, 201.20579528808594, 201.1649932861328, 201.05999755859375, 201.1699981689453, 201.1199951171875, 201.11000061035156, 201.17100524902344, 201.3800048828125, 201.30999755859375, 201.32000732421875, 201.30259704589844, 201.2816925048828, 201.25, 201.3800048828125, 201.42999267578125, 201.25, 201.30999755859375, 201.44500732421875, 201.44000244140625, 201.47000122070312, 201.4250030517578, 201.3748016357422, 201.39999389648438, 201.85000610351562, 201.9949951171875, 202.0399932861328, 201.8553009033203, 201.85000610351562, 201.8466033935547, 201.9250030517578, 201.84579467773438, 201.7003936767578, 201.7602996826172, 201.7899932861328, 201.8249969482422, 201.8300018310547, 201.8699951171875, 201.85000610351562, 201.82000732421875, 201.90499877929688, 201.83999633789062, 201.89500427246094, 201.89999389648438, 202.0, 201.9250030517578, 201.96499633789062, 202.02499389648438, 202.0, 202.00100708007812, 202.00999450683594, 202.3300018310547, 202.46890258789062, 202.33999633789062, 202.13999938964844, 202.19000244140625, 202.22000122070312, 202.25889587402344, 202.3300018310547, 202.1699981689453, 202.18499755859375, 202.17999267578125, 202.11500549316406, 202.19000244140625, 202.13999938964844, 202.11500549316406, 202.24000549316406, 202.3925018310547, 202.36500549316406, 202.52000427246094, 202.4499969482422, 202.4499969482422, 202.5500030517578, 202.64999389648438, 202.64500427246094, 202.6999969482422, 202.9199981689453, 202.8699951171875, 202.89999389648438, 203.12249755859375, 203.16000366210938, 203.28500366210938, 203.1324005126953, 203.2301025390625, 203.31500244140625, 203.33999633789062, 203.15499877929688, 203.1199951171875, 202.9250030517578, 202.90499877929688, 202.92999267578125, 202.72000122070312, 202.91000366210938, 202.75999450683594, 202.71499633789062, 202.5570068359375, 202.4499969482422, 202.36000061035156, 202.39999389648438, 202.3800048828125, 202.43499755859375, 202.3699951171875, 202.4600067138672, 202.4199981689453, 202.4499969482422, 202.4550018310547, 202.2998046875, 202.06500244140625, 202.1199951171875, 202.1027069091797, 202.17999267578125, 202.29010009765625, 202.2449951171875, 202.27499389648438, 202.22000122070312, 202.14999389648438, 202.15499877929688, 202.30999755859375, 202.38499450683594, 202.39999389648438, 202.5196075439453, 202.31149291992188, 202.05999755859375, 202.18899536132812, 202.16000366210938, 202.13999938964844, 202.1999969482422, 202.1750030517578, 202.1616973876953, 201.97999572753906, 201.9600067138672, 202.05560302734375, 202.19000244140625, 202.16000366210938, 202.0850067138672, 202.07000732421875, 202.0449981689453, 202.0449981689453, 202.07000732421875, 201.92010498046875, 202.02479553222656, 202.05380249023438, 202.18499755859375, 202.11000061035156, 202.1699981689453, 202.2100067138672, 202.24000549316406, 202.22000122070312, 202.22999572753906, 202.27020263671875, 202.27000427246094, 202.18499755859375, 202.18499755859375, 202.26109313964844, 202.22500610351562, 202.17999267578125, 202.22999572753906, 202.19000244140625, 202.125, 202.17689514160156, 202.2050018310547, 202.22999572753906, 202.22999572753906, 202.22999572753906, 202.0850067138672, 201.97999572753906, 202.02999877929688, 201.97000122070312, 201.9196014404297, 201.88999938964844, 201.8957977294922, 201.94000244140625, 201.7801055908203, 201.5399932861328, 201.625, 201.49000549316406, 201.5717010498047, 201.5399932861328, 201.46499633789062, 201.3126983642578, 201.4998016357422, 201.5301971435547, 201.57159423828125, 201.63999938964844, 201.53500366210938, 201.5800018310547, 201.57130432128906, 201.68539428710938, 201.63999938964844, 201.63540649414062, 201.57000732421875, 201.5800018310547, 201.58999633789062, 201.5749969482422, 201.49400329589844, 201.5301055908203, 201.5688934326172, 201.6199951171875, 201.5937042236328, 201.61000061035156, 201.61500549316406, 201.82000732421875, 201.7154998779297, 201.5446014404297, 201.5399932861328, 201.57000732421875, 201.58999633789062, 201.5644989013672, 201.5399932861328, 201.58090209960938, 201.5998992919922, 201.55140686035156, 201.5399932861328, 201.60000610351562, 201.47999572753906, 201.48500061035156, 201.44000244140625, 201.3300018310547, 201.39999389648438, 201.43499755859375, 201.44529724121094, 201.4550018310547, 201.53500366210938, 201.4949951171875, 201.77999877929688, 201.89999389648438, 201.77000427246094, 201.89999389648438, 201.8800048828125, 201.94000244140625, 201.8800048828125, 201.7899932861328, 201.74000549316406, 201.66000366210938, 201.68499755859375, 201.7550048828125, 201.8000030517578, 201.76499938964844, 201.86300659179688, 201.8300018310547, 201.80499267578125, 201.7949981689453, 201.77870178222656, 201.75, 201.6407928466797, 201.60000610351562, 201.5749969482422, 201.59500122070312, 201.60499572753906, 201.5399932861328, 201.52999877929688, 201.4499969482422, 201.4951934814453, 201.47999572753906, 201.36000061035156, 201.32000732421875, 201.30859375, 201.36500549316406, 201.24000549316406, 201.11000061035156, 201.05999755859375, 200.98500061035156, 200.91549682617188, 200.9857940673828, 200.91000366210938, 200.84500122070312, 200.8300018310547, 200.80499267578125, 200.8708038330078, 200.83999633789062, 200.72999572753906, 200.72000122070312, 200.47999572753906, 200.52999877929688, 200.70989990234375, 200.72000122070312, 200.59500122070312, 200.4550018310547, 200.55999755859375, 200.47999572753906, 200.2899932861328])

    # Setting constants
    # Constants are precomputed and annualized when necessary
    OPENING_PRICE = price_array[0]
    MEAN = 0.0899154503660764008
    VOLATILITY = 0.170245711170506837
    JUMP_COMPENSATOR = 0.0030019773251866114
    LAMBDA = 1.5873015873015872
    JUMP_VOLATILITY = 0.11236487744559041
    TIME = 1/252

    # Initializing mean price path
    mean_price_path = np.zeros(len(price_array))

    # Monte carlo simulation to find mean price path and plot each one of it
    for i in range(nsim):

        # using MJD to find nth priceArray
        priceArray = price_path(OPENING_PRICE, MEAN, VOLATILITY, LAMBDA, JUMP_COMPENSATOR, JUMP_VOLATILITY, TIME, len(price_array))

        # Plotting with label once to prevent label overload
        if i == 0:
            plt.plot(priceArray,alpha=0.1, color="blue", label="Simulated Paths")
        else:
            plt.plot(priceArray,alpha=0.1, color="blue")

        # Adding to mean price path array
        mean_price_path += priceArray
    
    # Computing mean price path
    mean_price_path /= nsim

    # Plotting Mean path and Actual path of the stock
    # Also beautifying the graph with title, legend, labels and grid
    plt.plot(mean_price_path, label="Mean Path", color="orange")
    plt.plot(price_array, label="Actual Path", color="red")
    plt.title(f"{nsim} Merton AAPL Price Paths vs Actual AAPL Price Path on 24-06-2025")
    plt.legend()
    plt.xlabel("Time (Minutes)")
    plt.ylabel("Price (USD)")
    plt.grid(True)
    plt.show()


# Running the function
# You can tweak the nsim to any number to change the number of simulations
if __name__ == "__main__":
    backtest(nsim=5)